{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","ksywa","className","src","alt","CardList","cats","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterCats","filter","cat","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6TAkBeA,G,MAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,QAIb,yBAAKC,IAAG,8CAAyCJ,EAAzC,QAAmDK,IAAI,KAC/D,kBAAC,WAAD,KACE,4BAAKJ,GACL,2BAAIC,OCGGI,G,MAXE,SAAC,GAAa,IAAXC,EAAU,EAAVA,KACnB,OACG,yBAAKJ,UAAU,SACbI,EAAKC,KAAI,SAACC,EAAMC,GAClB,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIO,EAAKG,GAAGV,GAAIC,KAAMM,EAAKG,GAAGT,KAAMC,MAAOK,EAAKG,GAAGE,iBCG9DC,G,MARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKX,UAAU,UACb,2BAAOY,KAAK,SAASC,YAAY,aAAaC,SAAUH,OCI/CI,EARD,SAACC,GACb,OACE,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,UACrCH,EAAMI,WCiBEC,E,kDAnBb,WAAYL,GAAO,IAAD,8BAChB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHI,E,8DAOAC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,yDAEFG,KAAKV,MAAMI,a,GAhBKQ,aC+CZC,G,wDAzCb,aAAc,IAAD,8BACX,gBAeFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAfzC,EAAKZ,MAAQ,CACTlB,KAAM,GACN4B,YAAY,IAJL,E,gEAQO,IAAD,OACjBG,MAAM,8CAA8CC,MAAK,SAAAC,GACvD,OAAOA,EAASC,UACfF,MAAK,SAAAG,GACN,EAAKZ,SAAS,CAAEvB,KAAMmC,S,+BAQhB,IAAD,EACqBb,KAAKJ,MAA1BlB,EADA,EACAA,KAAM4B,EADN,EACMA,YACPQ,EAAapC,EAAKqC,QAAO,SAAAC,GAC7B,OAAOA,EAAI5C,KAAK6C,cAAcC,SAASZ,EAAYW,kBAErD,OAAQvC,EAGN,kBAAC,WAAD,KACE,wBAAIJ,UAAU,SAAd,4BACA,kBAAC,EAAD,CAAWW,aAAee,KAAKI,iBAC/B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,KAAMoC,OAPtB,8C,GA3BYZ,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.8a74c4ec.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\nimport './Card.css';    \n\nconst Card = ({ id, name, ksywa }) => {\n  return (\n    <div className=\"card\">\n      {\n        //puste tagi html to tak na prawde tag Fragment wprowadzony w react 16.2 zamiast nadmiarowych Divow\n      }\n      <img src={`https://api.adorable.io/avatars/168/${id}.png`} alt=\"\" />\n      <Fragment>\n        <h4>{name}</h4>\n        <p>{ksywa}</p>\n      </Fragment>\n    </div>\n  );\n};\n\nexport default Card;","import React from \"react\";\nimport Card from './Card';\nimport './Cardlist.css';\n\nconst CardList = ({ cats }) =>{\n\treturn (\n    <div className='lista'>\n    \t{cats.map((user, i) => {\n\t\t\t\treturn (<Card key={i} id={cats[i].id} name={cats[i].name} ksywa={cats[i].username} />)\n    \t\t})  \n\t\t\t}\n    </div>\n  );\n}\n\nexport default CardList;","import React from \"react\";\nimport './SearchBox.css';\n\nconst SearchBox = ({searchChange}) => {\n  return(\n    <div className='search'>\n      <input type='search' placeholder='podaj imie' onChange={searchChange}/>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll =(props) => {\n  return (\n    <div style={{overflowY:'scroll', height:'400px'}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;","import React, { Component} from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info){\n    this.setState({ hasError: true })\n  }\n\n  render(){\n    if (this.state.hasError){\n      return <h1> spierdolilas cos kochana</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry;","import React, { Fragment, Component } from \"react\";\nimport Cardlist from \"../components/Cardlist\";\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n        cats: [],\n        searchfield:''\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response =>{\n      return response.json();\n    }).then(users =>{\n      this.setState({ cats: users })\n    })\n  }\n\n  onSearchChange = (event) =>{\n    this.setState({searchfield: event.target.value})\n  }\n\n  render() {\n    const {cats, searchfield} = this.state;\n    const filterCats = cats.filter(cat => {\n      return cat.name.toLowerCase().includes(searchfield.toLowerCase())\n    });\n    return !cats ?\n      <h1>Loading...</h1> :\n      (\n      <Fragment>\n        <h1 className='title'>Nerd friends from school</h1>\n        <SearchBox searchChange ={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <Cardlist cats={filterCats} />\n          </ErrorBoundry>\n        </Scroll>\n      </Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}